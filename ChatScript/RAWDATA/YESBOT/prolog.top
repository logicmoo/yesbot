concept: ~packname [amazon\_api app arouter assertions 
	atom\_feed bencode bims bio\_db bio\_db\_repo blog\_core
	by\_unix callgraph condition cowspeak cplint db\_facts dcg\_util
	dcgutils delay dia dict\_schema dirtree djson docstore dotcloud
	edcg environ evil fileutils format\_spec func function\_expansion
	genutils geoip googleclient graphml gvterm hello httplog interpolate
	jolog julian julian\_lang\_en lambda lbfgs lcs list\_util logtalk
	markdown mavis memo maybe miser musicbrainz mutable\_variables nan\_common
	nanp notes800 odf\_sheet os\_sub pac pac4pl pager pepl pinyin plOpenGl plchatscript
	plmake plmidi plml plosc plsmf plumdrum prosqlite pubmed quickcheck r\_session
	rdfs2pl readability\_parser real recaptcha refactor regex requires resbound rtchecks
	rtp\_qsndqs semantria simple\_template sindice smtp sort\_dict sparkle spawn spuds
	sql\_compiler sweet swicli swipe switex tap term\_diff thousands tor trill
	turing type\_check typedef unified\_diff unionfind uri\_qq web webconsole
	wsdl xlibrary xtools ]

topic: ~prolog bot=yesbot ( Prolog logic_programming declarative_programming )

t: Are you just learning Prolog?
	a: (~yesanswer) $noob=1 It's great you're learning Prolog.
	a: (~noanswer) $noob=0 Great - lots of very knowledgeable people hang out on this channel
	
t: ($noob == 1)You'll hate Prolog for a few weeks, and then you'll love it.
	a: ( not *~3 hate ) Well, it just gets better with time
	a: ( hate ) I'm baffled why the whole world isn't run on Prolog
	
t: ^gambit(~reason_for_interest)
t: ^gambit(~why_I_like_Prolog)
t: ^gambit(~class_help)

u: ( !~not love Prolog ) ^gambit(~why_I_like_Prolog)

topic: ~reason_for_interest bot=yesbot ( ~purpose_adverbs )

t: WHYLEARN( $noob=1 ) Why are you learning it?
	a: (like learning) $reason=plfun You'll find lots of kindred spirits here on "##prolog"!
	a: ([class][course][homework][problem]) $reason=class Are you having trouble with a Prolog programming problem?
	a: ( serious~5 ) $reason=serious Cool. More people are doing serious stuff with prolog these days.
	
# note that this isn't autoactivated
topic: ~research bot=yesbot ( graduate_student~1 student_at research linguistics theory)

t: Are you interested in constraint programming?
	a: (~yesanswer) I'm having trouble understanding Fruewirth's book.

t: I'm afraid I don't have any talent for math, but I like to do Sudoku's

t: Are you happy in academia?

t: How far along is your research?

s: (my research *~2 is *~2 {in about} _*) $usersresearch=_0 Interesting. Is _0 an active field now?

topic: ~packs bot=yesbot ( library lib pack extension add-in )

?: ( amazon\_api ) Michael Hendrix has a pack that makes talking to the Amazon API's easier.

?: ( web [ framework lib library ] ) There are a bunch of web frameworks. The built in http/ libraries, PWP (Prolog Web Pages), PSP (Prolog Server Pages) Raivo Laanemet's blog-core related packs like arouter, and the app pack.
    The built-in libs have a nice tutorial at http://www.pathwayslms.com/swipltuts/html/index.html  Also look at pengines and weblog.
	
?: ( client [ lib library] ) There are lots of client libraries. There are built-in HTTP, TCP, and UDP libraries, an atom feed reader, a WSDL reader, a bencoding (torrent) client, and handlers for XML and JSON.
      There's libs for musicbrainz and notes800 services, and weblog has several feeds built in.

?: ( [probability probabilistic stochastic] ) Lots of probabilistic inference libs. Built in theres' a nice random lib, bims is a nice Baysian inference pack, 
    cplint, trill, and problog are probabilistic logic libs. The first two are packs.
	
?: ( amazon ) There's a pack for the Amazon API.

?: ( torrent ) There's a pack, bencode, for the torrent protocol.

?: ( bayesian ) bims is a pack that infers model structure from data.

?: ( [ bio biology genetics peptide gene protein ] ) Check out bio_db pack and bio_db_repo.

?: ( [ blog cms (content management system) ] ) Blog core started as blogging software, but it's gone beyond that to be a capable CMS

?: ( [ unix linux ( !windows shell ) ] ) There's an elegance layer for calling shell commands, by_unix.

?: ( [ (call graph)  callgraph (show Prolog term) ] ) have you see dia, calltree, and gvterm packs?

?: ( [ functional lambda ] ) Check out condition, func, function\_expansion, lambda, and pac packs.

?: ( [ humor funny hilarious ] ) Check out pack evil and cowspeak - Mooo! Moo! MOOO!

?: ( [ database db ] ) Check out packs the built in persistency lib, the built in ODBC lib, CQL, and the packs db_facts and sql_compiler

?: ( [ dcg dcgs grammar ] ) Markus Triska and Annie wrote a tutorial at http://www.pathwayslms.com/swipltuts/dcg/index.html that's useful.
	There's a useful set of basic DCG's in library\(dcg/basics\), and a few useful dcg packs - dcgutils, edcg, and dcg\_util. Wouter Beek
	has a massive collection of DCG terms for common items at https://github.com/wouterbeek/Prolog-Library-Collection/tree/master/dcg .
	There's a lot of material in the tutorial on using pure IO to parse from files using phrase\_from\_file/2 .

?: MAKEPACK ( make a pack ) There's an example pack called hello 
?: ( example )^reuse(MAKEPACK)

?: ( where *~2 find ~2 [pack ~packname] ) You can see all the packs at http://www.swi-prolog.org/pack/list and install them by querying pack_install(mypack).

	
topic: ~why_I_like_Prolog bot=yesbot ()

t: I love Prolog.
	a: ( ~why ) There are lots of reasons, but the biggest one is how short programs written in it are.
	a: ( me *~2 too ) You too? Welcome to \#\#prolog, home of people who love Prolog. Or Mercury, or Logtalk, or CHR, or...

u:  ( compare *~2 functional language ) Well, logic languages are sort of a step  beyond functional languages.

topic ~class_help ( class homework problem exercise )

t: I'm afraid I can't help with homework right now, I'm not smart enough.


topic: ~the_presidents_analyst bot=yesbot ( tedium presidents_analyst )

t: Personally, I find submarine travel such teedium... teeedium... tedium....

t: T. P. C.

t: I have a cerebrum communicator

t:  take that, you hostile son of a bitch!






	

	



	
		